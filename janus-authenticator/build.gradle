/*
 *    Copyright [2018] [Prasannajeet Pani]
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'
apply plugin: "guru.stefma.bintrayrelease"

def libArtifactId = 'janus'
def libGroupId = 'com.praszapps.biometric'


publish {
    userOrg = 'prasannajeet89'
    repoName = 'praszappsMaven'
    group = libGroupId
    artifactId = libArtifactId
    version = generateVersionName()
    desc = 'Janus - The easy biometric authentication library for Android'
    website = 'https://gitlab.com/prasannajeet/Janus'
    issueTracker = 'https://gitlab.com/prasannajeet/Janus/issues'
    repository = 'https://gitlab.com/prasannajeet/Janus.git'
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion rootProject.ext.minimumSdkVersion
        targetSdkVersion 28
        versionCode generateVersionCode()
        versionName generateVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }
    lintOptions {
        abortOnError false
    }
    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
        }

        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

private Integer generateVersionCode() {
    return rootProject.ext.minimumSdkVersion * 10000000 + rootProject.ext.versionMajor * 10000 + rootProject.ext.versionMinor * 100 + rootProject.ext.versionPatch
}

private String generateVersionName() {
    return "${rootProject.ext.versionMajor}.${rootProject.ext.versionMinor}.${rootProject.ext.versionPatch}"
}

dependencies {
    implementation "androidx.appcompat:appcompat:$androidXAppcompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    testImplementation "junit:junit:$junitVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$livedataVersion"
}