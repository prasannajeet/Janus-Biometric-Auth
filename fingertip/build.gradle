apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

def artifactId = 'fingertip'
def groupId = 'com.praszapps.fingertip'

ext {

    bintrayRepo = "praszappsMaven"
    bintrayName = "com.praszapps.fingertip"

    libraryName = artifactId

    publishedGroupId = groupId
    artifact = 'clapfab'
    libraryVersion = generateVersionName()

    libraryDescription = 'Fingertip - The easy fingerprint authentication library for Android'

    siteUrl = 'https://github.com/prasannajeet/Fingertip'
    gitUrl = 'https://github.com/prasannajeet/Fingertip.git'


    developerId = 'prasannajeet89'
    developerName = 'Praszapps'
    developerEmail = 'developer.praszapps@gmail.com'

    licenseName = 'MIT License'
    licenseUrl = 'https://opensource.org/licenses/MIT'
    allLicenses = ["MIT License"]
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion rootProject.ext.minimumSdkVersion
        targetSdkVersion 28
        versionCode generateVersionCode()
        versionName generateVersionName()

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    lintOptions {
        abortOnError false
    }

    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
        }

        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

private Integer generateVersionCode() {
    return rootProject.ext.minimumSdkVersion * 10000000 + rootProject.ext.versionMajor * 10000 + rootProject.ext.versionMinor * 100 + rootProject.ext.versionPatch
}

private String generateVersionName() {
    String versionName = "${rootProject.ext.versionMajor}.${rootProject.ext.versionMinor}.${rootProject.ext.versionPatch}"

    if (rootProject.ext.isPrelease) {
        versionName += preReleaseSuffix
    }

    return versionName
}

publishing {
    publications {
        library(MavenPublication) {

            setGroupId(groupId)
            setArtifactId(artifactId)
            setVersion(android.defaultConfig.versionName)

            artifact(bundleDebug)
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified" == it.name) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$rootProject.ext.androidSupportLibVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.ext.constraintLayoutVersion"
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.testRunnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressionVersion"
    implementation "com.android.support:design:$rootProject.ext.androidSupportLibVersion"
    /*api "com.google.dagger:dagger:$rootProject.ext.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.ext.daggerVersion"
    api "com.google.dagger:dagger-android-support:$rootProject.ext.daggerVersion" // if you use the support libraries
    kapt "com.google.dagger:dagger-android-processor:$rootProject.ext.daggerVersion"*/
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"// ReactiveX
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.26.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.26.0"
}

if (project.rootProject.file('local.properties').exists()) {
    apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
    apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
}
kotlin {
    experimental {
        coroutines "enable"
    }
}